## triangle avec lettres
geo <- TT.plot(
class.sys = "FR.AISNE.TT")
TT.text(tri.data = res,geo=geo,labels = data$ID.soil,font = 1, col = "red", adj =c(1,1) )
data<- read.csv2(paste("Texture_sol.csv",sep=""),header=T)
nvar=length(data)
data[,2:nvar] <- apply(data[,2:nvar], 2, as.numeric)
rownames(data)<-data$ID.soil
text <- data %>% select(ID.soil,Argile,Limon,Sable,C.Org)
######### les données doivent se nommer CLAY, SILT et SAND
names(text)[2] <- "CLAY"
names(text)[3] <- "SILT"
names(text)[4] <- "SAND"
names(text)[5] <- "OC"
############################### Texture
######### test du jeu de données pour savoir si la somme de clay+silt+sand=100
TT.data.test( tri.data = text)
######### transformation des données pour que clay+silt+sand=100
res <- TT.normalise.sum( tri.data = text )table(text)
######### triangle de l'Aisne
TT.plot(class.sys = "FR.AISNE.TT")
######### triangle de l'Aisne avec données
TT.plot(class.sys = "FR.AISNE.TT",tri.data = res,main = "Soil texture data")
#Code couleur
code_couleur<-colors()[c(72, 72, 72, 72, 72, 72, 142,633,31,640,503,30,257,116,33,135)]
palette()
###Triangle de l'Aisne avec taille des points selon teneur et C organique
OC <- text %>% select(OC)
res <- bind_cols(res,OC)
row.names(res)<-data$ID.soil
ID <- text %>% select(ID.soil)
res <- bind_cols(res, ID)
geo <- TT.plot(class.sys = "FR.AISNE.TT",tri.data = res, z.name ="OC",main = "Soil texture triangle and organic Carbon bubble plot",grid.show = FALSE, col= "plum1", z.col.hue = 0.2, frame.bg.col = "turquoise4",class.lab.col="grey90", z.pch = 21)
###Legende
# Recompute some internal values:
z.cex.range <- TT.get("z.cex.range")
def.pch <- par("pch")
def.col <- par("col")
def.cex <- TT.get("cex")
oc.str <- TT.str(
res[,"OC"],
z.cex.range[1],
z.cex.range[2]
) #
# The legend:
legend( x = 80, y = 90, title = expression( bold('OC [g.kg'^-1 ~ ']') ),
legend = formatC( c( min( my.text[,"OC"] ), quantile(my.text[,"OC"] ,probs=c(25,50,75)/100), max( my.text[,"OC"] ) ), format = "f", digits = 1, width = 4, flag = "0" ), # pt.lwd = 4, col = def.col, pt.cex = c( min( oc.str ), quantile(oc.str ,probs=c(25,50,75)/100), max( oc.str ) ), #, pch = def.pch, bty = "o", bg = NA, #box.col = NA, # Uncomment this to remove the legend box text.col = "black", cex = def.cex ) #
legend("topright", legend = data$ID.soil, col = ("blue"), pch = 15, bty = "n", pt.cex = 2, cex = 0.8, text.col = "forestgreen", horiz = TRUE, inset = c(0.1, 0.1))
legend("topright",legend = data$ID.soil, col=code_couleur, pch = 15, cex = 0.9, ncol=3, text.font = 2)
######### triangle de l'Aisne avec données représentées par une lettre
## définition des codes (lettres)
labelz <- letters[1:dim(res)[1]]
labelz
## triangle avec lettres
geo <- TT.plot(
class.sys = "FR.AISNE.TT")
TT.text(tri.data = res,geo=geo,labels = data$ID.soil,font = 1, col = "red", adj =c(1,1) )
######### exporter la classification en tableau
classif_aisne <- TT.points.in.classes(
tri.data = res,
class.sys = "FR.AISNE.TT")
aisne <- as.data.frame(classif_aisne)
texture <- bind_cols(text,aisne)
write_excel_csv(texture,paste("Texture.csv",sep=""), delim = ";", na = "")
######### autres types de triangle des textures
######### remplacer "FR.AISNE.TT" par "HYPRES.TT" ou "FR.GEPPA.TT" etc...
setwd("~/github/Exercice/Shiny/App1")
data<- read.csv2(paste("Texture_sol.csv",sep=""),header=T)
nvar=length(data)
data[,2:nvar] <- apply(data[,2:nvar], 2, as.numeric)
rownames(data)<-data$ID.soil
text <- data %>% select(ID.soil,Argile,Limon,Sable,C.Org)
######### les données doivent se nommer CLAY, SILT et SAND
names(text)[2] <- "CLAY"
names(text)[3] <- "SILT"
names(text)[4] <- "SAND"
names(text)[5] <- "OC"
############################### Texture
######### test du jeu de données pour savoir si la somme de clay+silt+sand=100
TT.data.test( tri.data = text)
######### transformation des données pour que clay+silt+sand=100
res <- TT.normalise.sum( tri.data = text )table(text)
######### triangle de l'Aisne
TT.plot(class.sys = "FR.AISNE.TT")
######### triangle de l'Aisne avec données
TT.plot(class.sys = "FR.AISNE.TT",tri.data = res,main = "Soil texture data")
#Code couleur
code_couleur<-colors()[c(72, 72, 72, 72, 72, 72, 142,633,31,640,503,30,257,116,33,135)]
palette()
###Triangle de l'Aisne avec taille des points selon teneur et C organique
OC <- text %>% select(OC)
res <- bind_cols(res,OC)
row.names(res)<-data$ID.soil
ID <- text %>% select(ID.soil)
res <- bind_cols(res, ID)
geo <- TT.plot(class.sys = "FR.AISNE.TT",tri.data = res, z.name ="OC",main = "Soil texture triangle and organic Carbon bubble plot",grid.show = FALSE, col= "plum1", z.col.hue = 0.2, frame.bg.col = "turquoise4",class.lab.col="grey90", z.pch = 21)
###Legende
# Recompute some internal values:
z.cex.range <- TT.get("z.cex.range")
def.pch <- par("pch")
def.col <- par("col")
def.cex <- TT.get("cex")
oc.str <- TT.str(
res[,"OC"],
z.cex.range[1],
z.cex.range[2]
) #
# The legend:
legend( x = 80, y = 90, title = expression( bold('OC [g.kg'^-1 ~ ']') ),
legend = formatC( c( min( my.text[,"OC"] ), quantile(my.text[,"OC"] ,probs=c(25,50,75)/100), max( my.text[,"OC"] ) ), format = "f", digits = 1, width = 4, flag = "0" ), # pt.lwd = 4, col = def.col, pt.cex = c( min( oc.str ), quantile(oc.str ,probs=c(25,50,75)/100), max( oc.str ) ), #, pch = def.pch, bty = "o", bg = NA, #box.col = NA, # Uncomment this to remove the legend box text.col = "black", cex = def.cex ) #
legend("topright", legend = data$ID.soil, col = ("blue"), pch = 15, bty = "n", pt.cex = 2, cex = 0.8, text.col = "forestgreen", horiz = TRUE, inset = c(0.1, 0.1))
legend("topright",legend = data$ID.soil, col=code_couleur, pch = 15, cex = 0.9, ncol=3, text.font = 2)
######### triangle de l'Aisne avec données représentées par une lettre
## définition des codes (lettres)
labelz <- letters[1:dim(res)[1]]
labelz
## triangle avec lettres
geo <- TT.plot(
class.sys = "FR.AISNE.TT")
TT.text(tri.data = res,geo=geo,labels = data$ID.soil,font = 1, col = "red", adj =c(1,1) )
######### exporter la classification en tableau
classif_aisne <- TT.points.in.classes(
tri.data = res,
class.sys = "FR.AISNE.TT")
aisne <- as.data.frame(classif_aisne)
texture <- bind_cols(text,aisne)
write_excel_csv(texture,paste("Texture.csv",sep=""), delim = ";", na = "")
######### autres types de triangle des textures
######### remplacer "FR.AISNE.TT" par "HYPRES.TT" ou "FR.GEPPA.TT" etc...
runApp('essai')
install.packages("leaflet")
install.packages("leaflet")
runApp('~/github/Exercice/Shiny/App1/20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('essai')
runApp('essai')
runApp('essai')
install.packages ("ggplot2")
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
runApp('essai')
df <- data.frame(
group = c("Male", "Female", "Child"),
value = c(25, 25, 50)
)
head(df)
ui <- fluidPage(
numericInput("ble", "Nombre d'hectares en ble :", 20 ),
numericInput("mais", "Nombre d'hectares en mais :", 20),
numericInput("orge", "Nombre d'hectares en orge :", 20),
df <- data.frame(
group = c("Male", "Female", "Child"),
value = c(25, 25, 50)
)
head(df)
)
library(shiny)
ui <- fluidPage(
numericInput("ble", "Nombre d'hectares en ble :", 20 ),
numericInput("mais", "Nombre d'hectares en mais :", 20),
numericInput("orge", "Nombre d'hectares en orge :", 20),
df <- data.frame(
group = c("Male", "Female", "Child"),
value = c(25, 25, 50)
)
head(df)
)
server <- function(input, output) {
}
library(shiny)
ui <- fluidPage(
numericInput("ble", "Nombre d'hectares en ble :", 20 ),
numericInput("mais", "Nombre d'hectares en mais :", 20),
numericInput("orge", "Nombre d'hectares en orge :", 20),
df <- data.frame(
group = c("Male", "Female", "Child"),
value = c(25, 25, 50)
)
head(df)
)
server <- function(input, output) {
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
data(NUTRIAGE)
attach(NUTRIAGE)
matgras <- as.factor(matgras)
levels(matgras) <- c("beurre","margarine","arachide","tournesol","olive","Isio4","colza","canard")
require("RColorBrewer")
col <- brewer.pal(8,"Pastel2")
camembert(matgras,col)
detach(NUTRIAGE)
pages are written in french.frGPL (>= 2)yesxtable, RColorBrewer, gdata, IndependenceTestslatin12012-12-15 14:37:01 UTC; lafayeCRAN2012-12-15 15:55:07R 3.4.1; x86_64-pc-linux-gnu; 2017-09-23 07:01:03 UTC; unix
chart(data = copepoda, ~ factor(0) %fill=% class) +
geom_bar(width = 1) +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_viridis_d()
library("ggplot2")  # Visualisation des données
library("dplyr")
library("dplyr")
library("ggplot2")  # Visualisation des données
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
library("ggplot2")  # Visualisation des données
install.packages("dplyr")
library("dplyr")
count.data <- data.frame(
class = c("1st", "2nd", "3rd", "Crew"),
n = c(325, 285, 706, 885),
prop = c(14.8, 12.9, 32.1, 40.2)
)
count.data
library("ggplot2")  # Visualisation des données
install.packages("dplyr")
library("dplyr")
count.data <- data.frame(
class = c("1st", "2nd", "3rd", "Crew"),
n = c(325, 285, 706, 885),
prop = c(14.8, 12.9, 32.1, 40.2)
)
count.data
install.packages("dplyr")
library("ggplot2")  # Visualisation des données
library("dplyr")
count.data <- data.frame(
class = c("1st", "2nd", "3rd", "Crew"),
n = c(325, 285, 706, 885),
prop = c(14.8, 12.9, 32.1, 40.2)
)
count.data
count.data <- count.data %>%
arrange(desc(class)) %>%
mutate(lab.ypos = cumsum(prop) - 0.5*prop)
count.data
library("ggplot2")  # Visualisation des données
library("dplyr")
count.data <- data.frame(
class = c("1st", "2nd", "3rd", "Crew"),
n = c(325, 285, 706, 885),
prop = c(14.8, 12.9, 32.1, 40.2)
)
count.data
count.data <- count.data %>%
arrange(desc(class)) %>%
mutate(lab.ypos = cumsum(prop) - 0.5*prop)
count.data
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF")
ggplot(count.data, aes(x = "", y = prop, fill = class)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = lab.ypos, label = prop), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
library("ggplot2")  # Visualisation des données
library("dplyr")
count.data <- data.frame(
class = c("blé", "mais", "orge", "colza"),
n = c(325, 285, 706, 885),
prop = c(14.8, 12.9, 32.1, 40.2)
)
count.data
count.data <- count.data %>%
arrange(desc(class)) %>%
mutate(lab.ypos = cumsum(prop) - 0.5*prop)
count.data
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF")
ggplot(count.data, aes(x = "", y = prop, fill = class)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = lab.ypos, label = prop), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
library(shiny); runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
library("ggplot2")  # Visualisation des données
library("dplyr")
library(extrafont)
loadfonts(device="win")
Canada <- data.frame(Country = c("Autres", "Mexique", "Inde", "UE", "Chine", "USA"),
values = c(.12, .03, .06, .09, .15, .55))
Canada$Country <- factor(Canada$Country, levels = rev(Canada$Country))
ggplot(data = Canada, mapping = aes(x = factor(1), y = values, fill = Country)) +
geom_bar(width=1, stat = "identity") +
coord_polar(theta = "y") +
scale_fill_brewer(type = "seq",direction = -1, palette= "YlGnBu", guide = F) +
geom_text(aes(x = c(1.3, 1.5, 1.3, 1.3, 1.3, 1),
y = values/2 + c(0, cumsum(values)[-length(values)]),
label=paste(Country,"\n",values*100, "%")), family = "Consolas")
library("ggplot2")  # Visualisation des données
library("dplyr")
library(extrafont)
loadfonts(device="win")
Canada <- data.frame(Country = c("blé", "Mais", "orge", "colza"),
values = c(.12, .03, .06, .09))
Canada$Country <- factor(Canada$Country, levels = rev(Canada$Country))
ggplot(data = Canada, mapping = aes(x = factor(1), y = values, fill = Country)) +
geom_bar(width=1, stat = "identity") +
coord_polar(theta = "y") +
scale_fill_brewer(type = "seq",direction = -1, palette= "YlGnBu", guide = F) +
geom_text(aes(x = c(1.3, 1.5, 1.3, 1.3),
y = values/2 + c(0, cumsum(values)[-length(values)]),
label=paste(Country,"\n",values*100, "%")), family = "Consolas")
runApp('20200511_test_shiny.R')
runApp('20200511_test_shiny.R')
library(shiny); runApp('20200511_test_shiny.r')
library(shiny); runApp('20200511_test_shiny (1).r')
runApp('20200511_test_shiny (1).r')
runApp('20200511_test_shiny (1).r')
runApp('20200511_test_shiny (1).r')
runApp('20200511_test_shiny _Eloise.r')
data<- read.csv2(paste("Texture_sol.csv",sep=""),header=T)
nvar=length(data)
data[,2:nvar] <- apply(data[,2:nvar], 2, as.numeric)
rownames(data)<-data$ID.soil
text <- data %>% select(ID.soil,Argile,Limon,Sable,C.Org)
######### les données doivent se nommer CLAY, SILT et SAND
names(text)[2] <- "CLAY"
names(text)[3] <- "SILT"
names(text)[4] <- "SAND"
library(tidyverse)
library( soiltexture)
data<- read.csv2(paste("Texture_sol.csv",sep=""),header=T)
nvar=length(data)
data[,2:nvar] <- apply(data[,2:nvar], 2, as.numeric)
rownames(data)<-data$ID.soil
text <- data %>% select(ID.soil,Argile,Limon,Sable,C.Org)
######### les données doivent se nommer CLAY, SILT et SAND
names(text)[2] <- "CLAY"
names(text)[3] <- "SILT"
names(text)[4] <- "SAND"
names(text)[5] <- "OC"
######### test du jeu de données pour savoir si la somme de clay+silt+sand=100
TT.data.test( tri.data = text)
######### transformation des données pour que clay+silt+sand=100
res <- TT.normalise.sum( tri.data = text )table(text)
######### triangle de l'Aisne
TT.plot(class.sys = "FR.AISNE.TT")
######### triangle de l'Aisne avec données
TT.plot(class.sys = "FR.AISNE.TT",tri.data = res,main = "Soil texture data")
code_couleur<-colors()[c(72, 72, 72, 72, 72, 72, 142,633,31,640,503,30,257,116,33,135)]
palette()
OC <- text %>% select(OC)
res <- bind_cols(res,OC)
row.names(res)<-data$ID.soil
ID <- text %>% select(ID.soil)
res <- bind_cols(res, ID)
geo <- TT.plot(class.sys = "FR.AISNE.TT",tri.data = res, z.name ="OC",main = "Soil texture triangle and organic Carbon bubble plot",grid.show = FALSE, col= "plum1", z.col.hue = 0.2, frame.bg.col = "turquoise4",class.lab.col="grey90", z.pch = 21)
###Legende
# Recompute some internal values:
z.cex.range <- TT.get("z.cex.range")
def.pch <- par("pch")
def.col <- par("col")
def.cex <- TT.get("cex")
oc.str <- TT.str(
res[,"OC"],
z.cex.range[1],
z.cex.range[2]
) #
# The legend:
legend = formatC( c( min( my.text[,"OC"] ), quantile(my.text[,"OC"] ,probs=c(25,50,75)/100), max( my.text[,"OC"] ) ), format = "f", digits = 1, width = 4, flag = "0" ), # pt.lwd = 4, col = def.col, pt.cex = c( min( oc.str ), quantile(oc.str ,probs=c(25,50,75)/100), max( oc.str ) ), #, pch = def.pch, bty = "o", bg = NA, #box.col = NA, # Uncomment this to remove the legend box text.col = "black", cex = def.cex ) #
legend("topright", legend = data$ID.soil, col = ("blue"), pch = 15, bty = "n", pt.cex = 2, cex = 0.8, text.col = "forestgreen", horiz = TRUE, inset = c(0.1, 0.1))
legend("topright",legend = data$ID.soil, col=code_couleur, pch = 15, cex = 0.9, ncol=3, text.font = 2)
## définition des codes (lettres)
labelz <- letters[1:dim(res)[1]]
labelz
## triangle avec lettres
geo <- TT.plot(
class.sys = "FR.AISNE.TT")
TT.text(tri.data = res,geo=geo,labels = data$ID.soil,font = 1, col = "red", adj =c(1,1) )
######### exporter la classification en tableau
classif_aisne <- TT.points.in.classes(
tri.data = res,
class.sys = "FR.AISNE.TT")
aisne <- as.data.frame(classif_aisne)
texture <- bind_cols(text,aisne)
write_excel_csv(texture,paste("Texture.csv",sep=""), delim = ";", na = "")
######### autres types de triangle des textures
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny (1).r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
setwd("~/github/Exercice/Shiny/App1")
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny (1).r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
runApp('20200511_test_shiny _Eloise.r')
library(shiny); runApp('20200511_test_shiny (1).r')
